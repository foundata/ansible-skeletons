# Include where useful: Retrieve and display Podman container information to
# help diagnosing issues. Fails afterwards to end the playbook execution.

- name: "Molecule | Podman fail | Print container info"
  ansible.builtin.debug:
    msg: "{{ '{{' }} __testing_createcontainer_result['results'] {{ '}}' }}"
  when:
    - __testing_createcontainer_result is defined
    - __testing_createcontainer_result['results'] is defined
    # Skip if already displayed by previous debug tasks with "verbosity: 3"
    - (ansible_verbosity is defined) and ansible_verbosity < 3


- name: "Molecule | Podman fail | Print container non-zero exit codes"
  ansible.builtin.debug:
    msg: "{{ '{{' }} __fail_item['container']['Name'] {{ '}}' }}: {{ '{{' }} __fail_item['container']['State']['ExitCode'] {{ '}}' }}"
  when:
    - __testing_createcontainer_result is defined
    - __testing_createcontainer_result['results'] is defined
    - __fail_item['container'] is defined
    - __fail_item['container']['State'] is defined
    - __fail_item['container']['State']['ExitCode'] is defined
    - (__fail_item['container']['State']['ExitCode']) != 0
  loop: "{{ '{{' }} __testing_createcontainer_result['results'] {{ '}}' }}"
  loop_control:
    loop_var: "__fail_item"
    label: "{{ '{{' }} __fail_item['container']['Name'] {{ '}}' }}"


- name: "Molecule | Podman fail | Print container non-running states"
  ansible.builtin.debug:
    msg: "{{ '{{' }} __fail_item['container']['Name'] {{ '}}' }}: {{ '{{' }} __fail_item['container']['State']['Status'] {{ '}}' }}"
  when:
    - __testing_createcontainer_result is defined
    - __testing_createcontainer_result['results'] is defined
    - __fail_item['container'] is defined
    - __fail_item['container']['State'] is defined
    - __fail_item['container']['State']['Status'] is defined
    - __fail_item['container']['State']['Running'] is defined
    - not __fail_item['container']['State']['Running']
  loop: "{{ '{{' }} __testing_createcontainer_result['results'] {{ '}}' }}"
  loop_control:
    loop_var: "__fail_item"
    label: "{{ '{{' }} __fail_item['container']['Name'] {{ '}}' }}"


- name: "Molecule | Podman fail | Inform user about manual cleanup"
  ansible.builtin.debug:
    # split() to improve readability for humans
    msg: "{{ '{{' }} __testing_failcleanhint_msg.split('\n') {{ '}}' }}"
  vars:
    __testing_failcleanhint_msg: |-
      Container creation failed. You can manually remove the container(s) with:
      {{ '{%' }} for container in molecule_yml['platforms'] {{ '%}' }}
      {{ '{{' }} podman_executable {{ '}}' }} container stop '{{ '{{' }} container['name'] {{ '}}' }}'
      {{ '{{' }} podman_executable {{ '}}' }} container rm --ignore '{{ '{{' }} container['name'] {{ '}}' }}'

      {{ '{%' }} endfor {{ '%}' }}
      This might help resolve issues if the container is in a stuck state.
  when:
    - molecule_yml is defined
    - molecule_yml['platforms'] is defined


- name: "Molecule | Podman fail | Throw error"
  ansible.builtin.fail:
    msg: >
      Error during setup of the testing infrastructure with Podman. At least
      one container is not in state 'Running' or returned a non-zero exit code.
