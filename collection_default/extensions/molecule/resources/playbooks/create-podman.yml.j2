# Molecule create playbook. Creates the testing infrastructure and stores data
# in instance-config.
#
# This playbook is only compatible with scenarios using a "driver:" that
# invokes Podman in molecule.yml.
#
# This playbook was heavily inspired by the following resources:
# https://github.com/ansible-community/molecule-plugins/blob/main/src/molecule_plugins/podman/playbooks/create.yml
# https://ansible.readthedocs.io/projects/molecule/examples/podman/

---

- name: "Molecule | Create (Podman) | Create testing infrastructure on localhost"
  hosts: "localhost"
  connection: "local"
  gather_facts: false
  no_log: "{{ '{{' }} molecule_no_log {{ '}}' }}"
  vars:
    podman_executable: "{{ '{{' }} lookup('env','MOLECULE_PODMAN_EXECUTABLE') | default('podman', true) {{ '}}' }}"
    # Init variable to create an inventory containing the molecule target hosts
    molecule_inventory:
      all:
        hosts: {}
        children:
          molecule:
            hosts: {}
          molecule_linux:
            hosts: {}
          molecule_windows: # Placeholder - Windows containers are not supported (github.com/containers/podman/issues/11809)
            hosts: {}
  tasks:

    - name: "Molecule | Create (Podman) | Log into container registry"
      containers.podman.podman_login:
        executable: "{{ '{{' }} podman_executable {{ '}}' }}"
        registry: "{{ '{{' }} item['registry']['url'] {{ '}}' }}"
        username: "{{ '{{' }} item['registry']['credentials']['username'] {{ '}}' }}"
        password: "{{ '{{' }} item['registry']['credentials']['password'] | default(omit) {{ '}}' }}"
        tlsverify: "{{ '{{' }} item['registry']['tls_verify'] | default(true) {{ '}}' }}"
        certdir: "{{ '{{' }} item['certdir'] | default(omit) {{ '}}' }}"
      loop: "{{ '{{' }} molecule_yml['platforms'] {{ '}}' }}"
      loop_control:
        label: >-
          "{{ '{{' }} item['name'] }} registry username:
           {{ '{{' }} item['registry']['credentials']['username'] | default('None specified') {{ '}}' }}"
      when:
        - item['registry'] is defined
        - item['registry']['url'] is defined
        - item['registry']['url']
        - item['registry']['credentials'] is defined
        - item['registry']['credentials']['username'] is defined
      changed_when: false


    - name: "Molecule | Create (Podman) | Create containers running tests on target platforms"
      containers.podman.podman_container:
        executable: "{{ '{{' }} podman_executable {{ '}}' }}"
        name: "{{ '{{' }} item['name'] {{ '}}' }}"
        image: "{{ '{{' }} item['image'] {{ '}}' }}"
        state: "started"
        privileged: "{{ '{{' }} item['privileged'] | default(omit) {{ '}}' }}"
        volumes: "{{ '{{' }} item['volumes'] | default(omit) {{ '}}' }}"
        systemd: "{{ '{{' }} item['systemd'] | default(omit) {{ '}}' }}"
        cap_add: "{{ '{{' }} item['cap_add'] | default(omit) {{ '}}' }}"
        cap_drop: "{{ '{{' }} item['cap_drop'] | default(omit) {{ '}}' }}"
        # Use specific entry-points like /usr/sbin/init for seamless rootless systemd
        # operation (Podman GitHub issue #7287), best effort detection if a user does
        # not specify a command.
        command: >-
          {{ '{%-' }} if (item['systemd'] | default(false)) and not (item['command'] | default(false)) {{ '-%}' }}
            {{ '{%-' }} if (item['image'] | default('') | lower | regex_search('debian|ubuntu')) or
                   (item['name'] | default('') | lower | regex_search('debian|ubuntu')) {{ '-%}' }}
              /lib/systemd/systemd
            {{ '{%-' }} else {{ '-%}' }}
              /usr/sbin/init
            {{ '{%-' }} endif {{ '-%}' }}
          {{ '{%-' }} else {{ '-%}' }}
            {{ '{{' }} item['command'] if ((item['command'] | default(false)) and item['command'] != false) else 'sleep 1d' {{ '}}' }}
          {{ '{%-' }} endif {{ '-%}' }}
        log_driver: "{{ '{{' }} item['log_driver'] | default('journald') {{ '}}' }}"
      loop: "{{ '{{' }} molecule_yml['platforms'] {{ '}}' }}"
      register: __testing_createcontainer_result


    - name: "Molecule | Create (Podman) | Print container info"
      ansible.builtin.debug:
        msg: "{{ '{{' }} __testing_createcontainer_result['results'] {{ '}}' }}"
        verbosity: 3
      when:
        - __testing_createcontainer_result is defined
        - __testing_createcontainer_result['results'] is defined


    - name: "Molecule | Create (Podman) | Fail if container is not running"
      ansible.builtin.include_tasks:
        file: "../tasks/molecule/podman-fail.yml"
      when:
        - (item['container']['State']['ExitCode']) != 0 or (not item['container']['State']['Running'])
      run_once: true # noqa: run-once[task]
      loop: "{{ '{{' }} __testing_createcontainer_result['results'] {{ '}}' }}"
      loop_control:
        label: "{{ '{{' }} item['container']['Name'] {{ '}}' }}"


    - name: "Molecule | Create (Podman) | Create inventory data, add container to groups"
      ansible.builtin.set_fact:
        molecule_inventory: >
          {{ '{{' }} molecule_inventory | combine(__testing_inventory_partial_yaml | from_yaml, recursive=true) {{ '}}' }}
      vars:
        __testing_inventory_partial_yaml: |
          all:
            children:
              molecule:
                hosts:
                  "{{ '{{' }} item['name'] {{ '}}' }}":
                    ansible_connection: "containers.podman.podman"
              molecule_linux:
                hosts:
                  "{{ '{{' }} item['name'] {{ '}}' }}":
                    ansible_connection: "containers.podman.podman"
      loop: "{{ '{{' }} molecule_yml['platforms'] {{ '}}' }}"
      loop_control:
        label: "{{ '{{' }} item['name'] {{ '}}' }}"


    - name: "Molecule | Create (Podman) | Store inventory data as Molecole inventory file"
      ansible.builtin.copy:
        content: |
          {{ '{{' }} molecule_inventory | to_yaml {{ '}}' }}
        dest: "{{ '{{' }} molecule_ephemeral_directory }}/inventory/molecule_inventory.yml"
        mode: "u=rw,g=,o=" # 0600


    - name: "Molecule | Create (Podman) | Ensure new instances exist in inventory"
      ansible.builtin.meta: refresh_inventory


    - name: "Molecule | Create (Podman) | Print molecule environment info"
      ansible.builtin.debug:
        msg: |
          molecule_ephemeral_directory: {{ '{{' }} molecule_ephemeral_directory {{ '}}' }}
          groups: {{ '{{' }} groups {{ '}}' }}
        verbosity: 2


    - name: "Molecule | Create (Podman) | Run basic verification of testing infrastructure"
      ansible.builtin.include_tasks:
        file: "../tasks/molecule/check-infra.yml"
