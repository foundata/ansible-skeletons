# Initialization: Manage internal role setup and the Ansible environment.

---

- name: "Gather required facts"
  ansible.builtin.setup:
    gather_subset:
      - "distribution"
  when:
    - not ansible_facts.keys() | list | intersect(__{{ role_name }}_required_facts) == __{{ role_name }}_required_facts


- name: "Include role meta data as \"{{ role_name }}_meta\""
  ansible.builtin.include_vars:
    file: "../meta/main.yml"
    name: {{ role_name }}_meta


- name: "Check Ansible version requirement and fail if unmet"
  ansible.builtin.fail:
    msg: >
      This role requires Ansible {{ "{{" }} {{ role_name }}_meta['galaxy_info']['min_ansible_version'] {{ "}}" }}
      or higher. You are currently running Ansible {{ "{{" }} ansible_version['full'] {{ "}}" }}.
  when:
    - ansible_version['full'] is version_compare({{ role_name }}_meta['galaxy_info']['min_ansible_version'], "<")


- name: "Notify when platform support check is not possible"
  ansible.builtin.debug:
    msg: >
      The list of supported platforms cannot be checked as it is either empty
      or distribution facts are missing.
    verbosity: 1
  when:
    - ansible_distribution is not defined or
      ansible_distribution_version is not defined or
      ({{ role_name }}_meta['galaxy_info']['platforms'] | length) < 1


- name: "Warn when platform or OS is unsupported"
  ansible.builtin.fail:
    msg: >
      {{ "{{" }} ansible_distribution {{ "}}" }} {{ "{{" }} ansible_distribution_version {{ "}}" }} is not in the list of
      supported platforms from meta/main.yml: {{ "{{" }} {{ role_name }}_meta['galaxy_info']['platforms'] {{ "}}" }}
  ignore_errors: true
  when:
    - ({{ role_name }}_meta['galaxy_info']['platforms'] | length) > 0
    - ({{ role_name }}_meta['galaxy_info']['platforms']
       | selectattr('name', 'match', '^'+ansible_distribution+'$') | map(attribute = 'versions') | flatten
       | select('match', '^('+ansible_distribution_version+'|all)$', ignorecase = true) | list | length) < 1


- name: "Map role state to package state"
  ansible.builtin.set_fact:
    __{{ role_name }}_package_state: "{{ '{{' }} package_state_mapping[{{ role_name }}_state] {{ '}}' }}"
  vars:
    package_state_mapping:
      present: "{{ '{%' }} if {{ role_name }}_autoupgrade {{ '%}' }}latest{{ '{%' }} else {{ '%}' }}present{{ '{%' }} endif {{ '%}' }}"
      absent: "absent"
