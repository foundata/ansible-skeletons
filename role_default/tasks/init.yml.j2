# Initialization: Manage internal role setup and the Ansible environment.

---

- name: "init | Gather role-specific facts"
  ansible.builtin.setup:
    gather_subset:
      - "distribution"
  when:
    - not ansible_facts.keys() | list | intersect(__{{ role_name }}_used_facts) == __{{ role_name }}_used_facts


- name: "init | Include role meta data"
  ansible.builtin.include_vars:
    file: "../meta/main.yml"
    name: __{{ role_name }}_meta


- name: "init | Check Ansible version requirement and fail if unmet"
  ansible.builtin.fail:
    msg: >
      This role requires Ansible {{ '{{' }} __{{ role_name }}_meta['galaxy_info']['min_ansible_version'] {{ '}}' }}
      or higher. You are currently running Ansible {{ '{{' }} ansible_version['full'] {{ '}}' }} .
  when:
    - ansible_version['full'] is version_compare(__{{ role_name }}_meta['galaxy_info']['min_ansible_version'], "<")


- name: "init | Notify when platform support check is not possible"
  ansible.builtin.debug:
    msg: >
      The list of supported platforms cannot be checked as it is either empty
      or distribution facts are missing.
    verbosity: 1
  when:
    - ansible_facts['distribution'] is not defined or
      ansible_facts['distribution_version'] is not defined or
      (__{{ role_name }}_meta['galaxy_info']['platforms'] | length) < 1


- name: "init | Warn when platform is unsupported"
  ansible.builtin.fail:
    msg: >
      {{ '{{' }} ansible_distribution {{ '}}' }} {{ '{{' }} ansible_facts['distribution_version'] {{ '}}' }} is not in the list of
      supported platforms from meta/main.yml: {{ '{{' }} __{{ role_name }}_meta['galaxy_info']['platforms'] {{ '}}' }}
  ignore_errors: true # noqa: ignore-errors
  when:
    - (__{{ role_name }}_meta['galaxy_info']['platforms'] | length) > 0
    - (__{{ role_name }}_meta['galaxy_info']['platforms']
       | selectattr('name', 'match', '^'+ansible_distribution+'$') | map(attribute = 'versions') | flatten
       | select('match', '^('+ansible_facts['distribution_version']+'|all)$', ignorecase = true) | list | length) < 1


- name: "init | Set platform-specific variable files to include"
  ansible.builtin.set_fact:
    __{{ role_name }}_platform_vars_file_list:
      - "{{ '{{' }} ansible_facts['os_family'] {{ '}}' }}.yml"
      - "{{ '{{' }} ansible_facts['distribution'] {{ '}}' }}.yml"
      - "{{ '{{' }} ansible_facts['distribution'] {{ '}}' }}_{{ '{{' }} ansible_facts['distribution_major_version'] {{ '}}' }}.yml"
      - "{{ '{{' }} ansible_facts['distribution'] {{ '}}' }}_{{ '{{' }} ansible_facts['distribution_version'] {{ '}}' }}.yml"


- name: "init | Include platform specific-variables (if any)"
  ansible.builtin.include_vars: "{{ '{{' }} __{{ role_name }}_vars_file {{ '}}' }}"
  loop: "{{ '{{' }} __{{ role_name }}_platform_vars_file_list | unique | list {{ '}}' }}"
  vars:
    __{{ role_name }}_vars_file: "{{ '{{' }} role_path {{ '}}' }}/vars/{{ '{{' }} item {{ '}}' }}"
  when:
    - __{{ role_name }}_vars_file is file


- name: "init | Map role state to package state"
  ansible.builtin.set_fact:
    __{{ role_name }}_package_state: "{{ '{{' }} __package_state_mapping[{{ role_name }}_state] {{ '}}' }}"
  vars:
    __package_state_mapping:
      present: "{{ '{%' }} if {{ role_name }}_autoupgrade {{ '%}' }}latest{{ '{%' }} else {{ '%}' }}present{{ '{%' }} endif {{ '%}' }}"
      absent: "absent"
